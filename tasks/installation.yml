---
# tasks file for sap-preconfigure: installation

- name: Get info about outstanding package updates
  command: yum check-update
  register: yum_check_update_result
  args:
    warn: false
  changed_when: false
#  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"
# We should better always ignore errors:
  ignore_errors: yes

- name: Assert that there are no more outstanding package updates
  assert:
    that:
      - yum_check_update_result.rc == 0
    fail_msg: "FAIL: System needs to be updated!"
    success_msg: "PASS: There are no more outstanding package updates."
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"
  when: sap_preconfigure_assert_update == true

- set_fact:
    yum_envgroup_list_installed_command: "yum group list installed hidden ids | awk '/Installed Environment Groups:/{a=1}/Installed Groups:/{a=0}{if (a==1&&!/:/){print $NF}}' | sed 's,(,,;s,),,'"
    yum_group_list_installed_command: "yum group list installed hidden ids | awk '/Installed Groups:/{a=1}{if (a==1&&!/:/){print $NF}}' | sed 's,(,,;s,),,'"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '7'

- set_fact:
    yum_envgroup_list_installed_command: "yum group list installed -v | awk '/Installed Environment Groups:/{a=1}/Installed Groups:/{a=0}{if (a==1&&!/:/){print $NF}}' | sed 's,(,,;s,),,'"
    yum_group_list_installed_command: "yum group list installed -v | awk '/Installed Groups:/{a=1}{if (a==1&&!/:/){print $NF}}' | sed 's,(,,;s,),,'"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '8'

- name: Check if required environment groups are installed
  shell: "{{ yum_envgroup_list_installed_command }}"
  register: yum_envgroup_result
  changed_when: no
  args:
    warn: false

- name: Assert that all required environment groups are installed
  assert:
    that:
      - "'{{ line_item }}' in yum_envgroup_result.stdout_lines"
    fail_msg: "FAIL: Environment group '{{ line_item }}' is not installed!"
    success_msg: "PASS: Environment group '{{ line_item }}' is installed."
  with_items:
    - "{{ __sap_preconfigure_assert_envgroups }}"
  loop_control:
    loop_var: line_item
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"
  when: __sap_preconfigure_assert_envgroups != ""

- debug:
    msg: "PASS: No required environment packages defined (variable __sap_preconfigure_assert_envgroups)."
  ignore_errors: yes
  when: __sap_preconfigure_assert_envgroups == ""

- name: Check if required package groups are installed
  shell: "{{ yum_group_list_installed_command }}"
  register: yum_group_result
  changed_when: no
  args:
    warn: false

- name: Assert that all required package groups are installed
  assert:
    that:
      - "'{{ line_item }}' in yum_group_result.stdout_lines"
    fail_msg: "FAIL: Package group '{{ line_item }}' is not installed!"
    success_msg: "PASS: Package group '{{ line_item }}' is installed."
  with_items:
    - "{{ __sap_preconfigure_assert_packagegroups }}"
  loop_control:
    loop_var: line_item
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"
  when: __sap_preconfigure_assert_packagegroups != ""

- debug:
    msg: "PASS: No required package groups defined (variable __sap_preconfigure_assert_packagegroups)."
  ignore_errors: yes
  when: __sap_preconfigure_assert_packagegroups == ""


- name: Check if required packages are installed
  shell: yum info installed {{ __sap_preconfigure_assert_packages | map('quote') | join(' ') }} | awk '/Name/{n=$NF}/Version/{v=$NF}/Release/{r=$NF}/Description/{printf ("%s\n", n)}'
  register: yum_result
  changed_when: no
  args:
    warn: false

- name: Assert that all required packages are installed
  assert:
    that:
      - "'{{ line_item }}' in yum_result.stdout_lines"
    fail_msg: "FAIL: Package '{{ line_item }}' is not installed!"
    success_msg: "PASS: Package '{{ line_item }}' is installed."
  with_items:
    - "{{ __sap_preconfigure_assert_packages }}"
  loop_control:
    loop_var: line_item
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"

- name: Check if minimum required package versions are installed
  block:
  - name: Gather package facts
    package_facts:

  - set_fact:
      reqpkgs: "{{ __sap_preconfigure_assert_min_pkgs }}"

  - debug:
      var: reqpkgs

  - set_fact:
      pkgs_to_install_update: |-
        {% set ns = namespace() %}
        {% set ns.pkgs = [] %}
        {% for reqpkg in reqpkgs %}
        {%   if not reqpkg[0] in ansible_facts.packages %}
        {%     set _ = ns.pkgs.append("Package " + reqpkg | join('-') + " is missing and needs to be installed!") %}
        {%   else %}
        {%     set pkg = ansible_facts.packages[reqpkg[0]][-1] %}
        {%     set verrel = pkg.version ~ '-' ~ pkg.release %}
        {%     if reqpkg[1].replace (".el", ".0.0.") is version(verrel.replace (".el", ".0.0."), '>') %}
        {%       set _ = ns.pkgs.append("Package " + pkg.name + "-" + verrel + " needs to be updated to: " + reqpkg | join('-') + "!") %}
        {%     else %}
        {%       set _ = ns.pkgs.append("Package " + reqpkg | join('-') + " is already installed with same or later version. Currently installed: " + pkg.name + "-" + verrel)  %}
        {%     endif %}
        {%   endif %}
        {% endfor %}
        {{ ns.pkgs }}

  - name: Assert that minimum required package versions are installed
    assert:
      that: "'is already installed' in line_item"
      fail_msg: "FAIL: {{ line_item }}"
      success_msg: "PASS: {{ line_item }}"
    loop: "{{ pkgs_to_install_update | trim() }}"
    loop_control:
      loop_var: line_item
    ignore_errors: yes
  when: __sap_preconfigure_assert_min_pkgs != ""

- debug:
    msg: "PASS: No minimum required package version defined (variable __sap_preconfigure_assert_min_pkgs)."
  ignore_errors: yes
  when: __sap_preconfigure_assert_min_pkgs == ""

- set_fact:
    needs_restarting_command: "needs-restarting -r"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '7'

- set_fact:
    needs_restarting_command: "yum needs-restarting -r"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '8'

- name: Check if system needs to be restarted
  command: "{{ needs_restarting_command }}"
  register: needs_restarting_result
  changed_when: false
  args:
    warn: false
  check_mode: false
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"

- name: Assert that system needs no restart
  assert:
    that:
      - needs_restarting_result.rc == 0
    fail_msg: "FAIL: System needs to be restarted!"
    success_msg: "PASS: System needs no restart."
  ignore_errors: "{{ sap_preconfigure_assert_ignore_errors|d(false) }}"

...
